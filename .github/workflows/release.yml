name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

env:
  GO_VERSION: '1.23'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Set version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=v0.1.0
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Set CGO based on platform
        if [ "$GOOS" = "linux" ]; then
          export CGO_ENABLED=1
        else
          # Disable CGO for cross-compilation to avoid toolchain issues
          export CGO_ENABLED=0
        fi
        
        # Set binary name
        BINARY_NAME=ai-gateway-hub
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME=${BINARY_NAME}.exe
        fi
        
        # Build
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o ${BINARY_NAME} ./main.go
        
        # Create archive
        ARCHIVE_NAME=ai-gateway-hub-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}
        if [ "$GOOS" = "windows" ]; then
          zip ${ARCHIVE_NAME}.zip ${BINARY_NAME}
        else
          tar -czf ${ARCHIVE_NAME}.tar.gz ${BINARY_NAME}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-gateway-hub-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ai-gateway-hub-*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=v0.1.0
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "ai-gateway-hub-*" -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Generate release notes
      id: release_notes
      run: |
        cat << 'EOF' > release_notes.md
        ## üöÄ AI Gateway Hub ${{ steps.version.outputs.VERSION }}
        
        ### ‚ú® What's New
        - Fixed chat interface and resolved template conflicts
        - Implemented unified logging system with industry-standard libraries
        - Enhanced WebSocket communication reliability
        - Improved Claude CLI integration with proper authentication
        
        ### üîß Technical Improvements
        - Migrated to logrus for standardized logging
        - Replaced custom configuration with viper
        - Enhanced error handling and debugging
        - Improved DevContainer setup
        
        ### üì¶ Downloads
        Choose the appropriate binary for your platform:
        
        | Platform | Architecture | Download |
        |----------|--------------|----------|
        | Linux | x64 | `ai-gateway-hub-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz` |
        | Linux | ARM64 | `ai-gateway-hub-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz` |
        | macOS | x64 | `ai-gateway-hub-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz` |
        | macOS | ARM64 | `ai-gateway-hub-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz` |
        | Windows | x64 | `ai-gateway-hub-${{ steps.version.outputs.VERSION }}-windows-amd64.zip` |
        
        
        ### üõ†Ô∏è Installation
        1. Download the appropriate binary for your platform
        2. Extract the archive
        3. Make the binary executable (Linux/macOS): `chmod +x ai-gateway-hub`
        4. Run: `./ai-gateway-hub`
        
        ### üìã Requirements
        - Claude CLI installed and authenticated
        - Redis server (for session management)
        
        ---
        
        ü§ñ Generated with [Claude Code](https://claude.ai/code)
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: AI Gateway Hub ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Set version
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=v0.1.0
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Release notification
      run: |
        if [[ "${{ needs.release.result }}" == "success" ]]; then
          echo "‚úÖ Successfully released AI Gateway Hub ${{ steps.version.outputs.VERSION }}"
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}"
        else
          echo "‚ùå Release failed for version ${{ steps.version.outputs.VERSION }}"
          exit 1
        fi